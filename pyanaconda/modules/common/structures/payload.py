#
# DBus structures for the payload data.
#
# Copyright (C) 2020 Red Hat, Inc.
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions of
# the GNU General Public License v.2, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY expressed or implied, including the implied warranties of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.  You should have received a copy of the
# GNU General Public License along with this program; if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.  Any Red Hat trademarks that are incorporated in the
# source code or documentation are not subject to the GNU General Public
# License and may only be used or replicated with the express permission of
# Red Hat, Inc.
#

from dasbus.structure import DBusData
from dasbus.typing import *  # pylint: disable=wildcard-import
from pyanaconda.core.constants import URL_TYPE_BASEURL

__all__ = ["RepoConfigurationData"]


class RepoConfigurationData(DBusData):
    """Structure to hold repository configuration."""

    def __init__(self):
        self._name = ""
        self._url = ""
        self._type = URL_TYPE_BASEURL
        self._ssl_verification_enabled = True

    @property
    def name(self) -> Str:
        """Get name of this repository.

        If name is not set it will be generated by source.
        """
        return self._name

    @name.setter
    def name(self, name: Str):
        self._name = name

    @property
    def url(self) -> Str:
        """Get link to the repository."""
        return self._url

    @url.setter
    def url(self, url: Str):
        self._url = url

    @property
    def type(self) -> Str:
        """Get type of the url.

        Possible values:
        - BASEURL
        - MIRRORLIST
        - METALINK
        """
        return self._type

    @type.setter
    def type(self, url_type: Str):
        self._type = url_type

    @property
    def ssl_verification_enabled(self) -> Bool:
        """Is ssl verification enabled?

        You can disable SSL verification to reach server with certificate
        which is not part of installation environment.
        """
        return self._ssl_verification_enabled

    @ssl_verification_enabled.setter
    def ssl_verification_enabled(self, ssl_verification_enabled: Bool):
        self._ssl_verification_enabled = ssl_verification_enabled
