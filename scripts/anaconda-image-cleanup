#!/usr/bin/python
import os
import sys

# set the imageInstall flag so the logger won't log to the syslog
from pyanaconda.flags import flags
flags.imageInstall = True

import pyanaconda.anaconda_log
pyanaconda.anaconda_log.init()

from pyanaconda import iutil

from pyanaconda.cmdline import InstallInterface
from pyanaconda.storage import StorageDiscoveryConfig
from pyanaconda.storage.devicetree import DeviceTree
from pyanaconda.storage import devicelibs

intf = InstallInterface()
storage_config = StorageDiscoveryConfig()

# unmount filesystems
for mounted in reversed(open("/proc/mounts").readlines()):
    (device, mountpoint, rest) = mounted.split(" ", 2)
    if not mountpoint.startswith("/mnt/sysimage"):
        continue
    os.system("umount %s" % mountpoint)

# tear down the devices representing the disk images
sys_class_block = "/sys/class/block"
for dev in os.listdir(sys_class_block):
    if not dev.startswith("dm-"):
        continue

    name = open("%s/%s/dm/name" % (sys_class_block, dev)).read().strip()
    uuid = open("%s/%s/dm/uuid" % (sys_class_block, dev)).read().strip()
    if not name or not uuid.startswith("ANACONDA-"):
        continue

    loop = os.listdir("%s/%s/slaves" % (sys_class_block, dev))[0].strip()
    path = devicelibs.loop.get_device_path(loop)
    storage_config.diskImages[name] = path

if not storage_config.diskImages:
    sys.exit(1)

os.system("udevadm control --env=ANACONDA=1")
os.system("udevadm trigger --subsystem-match block")
os.system("udevadm settle")
devicetree = DeviceTree(intf=intf, conf=storage_config)
devicetree.populate(cleanupOnly=True)
devicetree.teardownAll()
for name in devicetree.diskImages.keys():
    device = devicetree.getDeviceByName(name)
    device.deactivate(recursive=True)
os.system("udevadm control --env=ANACONDA=0")

